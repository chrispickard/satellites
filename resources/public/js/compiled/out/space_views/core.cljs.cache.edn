;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name space-views.core, :imports nil, :requires {r reagent.core, reagent.core reagent.core, a cljs.core.async, cljs.core.async cljs.core.async, http cljs-http.client, cljs-http.client cljs-http.client}, :uses nil, :defs {by-id {:protocol-inline nil, :meta {:file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :line 8, :column 7, :end-line 8, :end-column 12, :arglists (quote ([id]))}, :name space-views.core/by-id, :variadic false, :file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :end-column 12, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, app-state {:name space-views.core/app-state, :file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :line 13, :column 1, :end-line 13, :end-column 19, :meta {:file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :line 13, :column 10, :end-line 13, :end-column 19}}, perform-request {:protocol-inline nil, :meta {:file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :line 15, :column 7, :end-line 15, :end-column 22, :arglists (quote ([lat lon])), :doc ""}, :name space-views.core/perform-request, :variadic false, :file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :end-column 22, :method-params ([lat lon]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lat lon])), :doc ""}, last-date {:protocol-inline nil, :meta {:file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :line 28, :column 7, :end-line 28, :end-column 16, :arglists (quote ([result])), :doc ""}, :name space-views.core/last-date, :variadic false, :file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :end-column 16, :method-params ([result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([result])), :doc ""}, swap-with-new-input {:protocol-inline nil, :meta {:file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :line 33, :column 7, :end-line 33, :end-column 26, :arglists (quote ([lat lon])), :doc ""}, :name space-views.core/swap-with-new-input, :variadic false, :file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :end-column 26, :method-params ([lat lon]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lat lon])), :doc ""}, space-component {:protocol-inline nil, :meta {:file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :line 40, :column 7, :end-line 40, :end-column 22, :arglists (quote ([]))}, :name space-views.core/space-component, :variadic false, :file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, button-component {:protocol-inline nil, :meta {:file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :line 43, :column 7, :end-line 43, :end-column 23, :arglists (quote ([]))}, :name space-views.core/button-component, :variadic false, :file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, run {:protocol-inline nil, :meta {:file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :line 48, :column 16, :end-line 48, :end-column 19, :export true, :arglists (quote ([]))}, :name space-views.core/run, :variadic false, :file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :line 53, :column 7, :end-line 53, :end-column 19, :arglists (quote ([]))}, :name space-views.core/on-js-reload, :variadic false, :file "/Users/pickardc/dev/clojure/space-views/src/space_views/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {m cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros, r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:date :else :value :recur :type :on-click :with-credentials? :query-params :h2 :input :body :location :results}, :order [:with-credentials? :query-params :date :location :body :results :recur :else :h2 :input :type :value :on-click]}, :doc nil}